--- /meson.build
+++ /meson.build
@@ -34,10 +34,6 @@ shared_module(
     'src/Services/MprisClient.vala',
     'src/Services/Settings.vala',
     'src/Services/Volume-control.vala',
-    'src/Services/Manager.vala',
-    'src/Services/Adapter.vala',
-    'src/Services/Device.vala',
-    'src/Services/MediaPlayer.vala',
     asresources,
     dependencies: [
         dependency('glib-2.0'),
--- /src/Widgets/MprisGui.vala
+++ /src/Widgets/MprisGui.vala
@@ -68,7 +68,6 @@ public class Sound.Widgets.ClientWidget
     }
 
     private Services.MprisClient? client_ = null;
-    private Services.MediaPlayer? mp_client = null;
 
     public Services.MprisClient? client {
         get {
@@ -123,22 +122,6 @@ public class Sound.Widgets.ClientWidget
     }
 
     /**
-     * Create a new ClientWidget for bluetooth controls
-     *
-     * @param client The underlying MediaPlayer instance to use
-     */
-    public ClientWidget.bluetooth (Services.MediaPlayer media_player_client, string name, string icon) {
-        mp_client = media_player_client;
-
-        app_icon = new ThemedIcon (icon);
-        background.set_from_gicon (app_icon, Gtk.IconSize.DIALOG);
-        title_label.label = "<b>%s</b>".printf (Markup.escape_text (name));
-        artist_label.label = NOT_PLAYING;
-
-        update_controls ();
-    }
-
-    /**
      * Create a new ClientWidget for the default player
      *
      * @param info The AppInfo of the default music player
@@ -235,10 +218,8 @@ public class Sound.Widgets.ClientWidget
                 if (!Thread.supported ()) {
                     warning ("Threading is not supported. DBus timeout could be blocking UI");
                     try {
-                        if (mp_client == null && client.player.can_go_previous) {
+                        if (client.player.can_go_previous) {
                             client.player.previous ();
-                        } else if (mp_client != null) {
-                            mp_client.previous ();
                         }
                     } catch  (Error e) {
                         warning ("Going to previous track probably failed (faulty MPRIS interface): %s", e.message);
@@ -246,11 +227,7 @@ public class Sound.Widgets.ClientWidget
                 } else {
                     new Thread <void*> ("wingpanel_indicator_sound_dbus_backward_thread", () => {
                         try {
-                            if (mp_client == null) {
-                                client.player.previous ();
-                            } else if (mp_client != null) {
-                                mp_client.previous ();
-                            }
+                            client.player.previous ();
                         } catch (Error e) {
                             warning ("Going to previous track probably failed (faulty MPRIS interface): %s", e.message);
                         }
@@ -268,32 +245,14 @@ public class Sound.Widgets.ClientWidget
                 if (!Thread.supported ()) {
                     warning ("Threading is not supported. DBus timeout could be blocking UI");
                     try {
-                        if (mp_client == null) {
-                            client.player.play_pause ();
-                        } else if (mp_client != null) {
-                            if (mp_client.status == "playing") {
-                                mp_client.pause ();
-                            } else {
-                                mp_client.play ();
-                            }
-                            update_play_status ();
-                        }
+                        client.player.play_pause ();
                     } catch (Error e) {
                         warning ("Playing/Pausing probably failed (faulty MPRIS interface): %s", e.message);
                     }
                 } else {
                     new Thread <void*> ("wingpanel_indicator_sound_dbus_backward_thread", () => {
                         try {
-                            if (mp_client == null) {
-                                client.player.play_pause ();
-                            } else if (mp_client != null) {
-                                if (mp_client.status == "playing") {
-                                    mp_client.pause ();
-                                } else {
-                                    mp_client.play ();
-                                }
-                                update_play_status ();
-                            }
+                            client.player.play_pause ();
                         } catch (Error e) {
                             warning ("Playing/Pausing probably failed (faulty MPRIS interface): %s", e.message);
                         }
@@ -311,10 +270,8 @@ public class Sound.Widgets.ClientWidget
                 if (!Thread.supported ()) {
                     warning ("Threading is not supported. DBus timeout could be blocking UI");
                     try {
-                        if (mp_client == null && client.player.can_go_next) {
+                        if (client.player.can_go_next) {
                             client.player.next ();
-                        } else if (mp_client != null) {
-                            mp_client.next ();
                         }
                     } catch (Error e) {
                         warning ("Going to next track probably failed (faulty MPRIS interface): %s", e.message);
@@ -322,11 +279,7 @@ public class Sound.Widgets.ClientWidget
                 } else {
                     new Thread <void*> ("wingpanel_indicator_sound_dbus_forward_thread", () => {
                         try {
-                            if (mp_client == null) {
-                                client.player.next ();
-                            } else if (mp_client != null) {
-                                mp_client.next ();
-                            }
+                            client.player.next ();
                         } catch (Error e) {
                             warning ("Going to next track probably failed (faulty MPRIS interface): %s", e.message);
                         }
@@ -439,13 +392,8 @@ public class Sound.Widgets.ClientWidget
      * Update prev/next sensitivity based on player requirements
      */
     private void update_controls () {
-        if (mp_client == null) {
-            prev_btn.sensitive = client.player.can_go_previous;
-            next_btn.sensitive = client.player.can_go_next;
-        } else {
-            prev_btn.sensitive = true;
-            next_btn.sensitive = true;
-        }
+        prev_btn.sensitive = client.player.can_go_previous;
+        next_btn.sensitive = client.player.can_go_next;
     }
 
     /**
--- /src/Widgets/MprisWidget.vala
+++ /src/Widgets/MprisWidget.vala
@@ -21,12 +21,9 @@ public class Sound.Widgets.MprisWidget :
 
     AppInfo? default_music;
     ClientWidget default_widget;
-    ClientWidget bluetooth_widget;
     HashTable<string,ClientWidget> ifaces;
     public signal void close ();
 
-    public Sound.Services.ObjectManager object_manager;
-
     public MprisWidget() {
         Object (orientation: Gtk.Orientation.VERTICAL, spacing: 1);
 
@@ -49,39 +46,6 @@ public class Sound.Widgets.MprisWidget :
             pack_start(default_widget, false, false, 0);
         }
 
-        object_manager = new Services.ObjectManager ();
-        object_manager.bind_property ("has-object", this, "visible", GLib.BindingFlags.SYNC_CREATE);
-
-        if (object_manager.has_object) {
-            object_manager.set_last_state ();
-        }
-
-        object_manager.media_player_added.connect ((media_player, name, icon) => {
-            bluetooth_widget = new ClientWidget.bluetooth (media_player, name, icon);
-            bluetooth_widget.close.connect (() => {
-                close ();
-            });
-
-            bluetooth_widget.show_all ();
-            pack_start (bluetooth_widget, false, false, 0);
-        });
-
-        object_manager.media_player_removed.connect ((media_player) => {
-            debug ("Media player %s removed", media_player.name);
-            bluetooth_widget.destroy ();
-        });
-
-        object_manager.media_player_status_changed.connect ((status, title, artist) => {
-            bluetooth_widget.update_play (status, title, artist);
-            if (status == "playing" && default_widget.client.player.playback_status == "Playing") {
-                try {
-                    default_widget.client.player.play_pause ();
-                } catch (Error e) {
-                    critical (e.message);
-                }
-            }
-        });
-
         show_all();
     }
 
