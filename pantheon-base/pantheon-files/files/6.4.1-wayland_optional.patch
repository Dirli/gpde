--- /meson.build	2023-07-10 20:54:14.000000000 +0300
+++ /meson.build	2023-08-19 02:04:02.431727589 +0300
@@ -82,6 +82,10 @@
     language: 'vala'
 )
 
+wayland_dep = dependency('gdk-wayland-3.0', required: false)
+if wayland_dep.found()
+  add_project_arguments('--define=WAYLAND', language: 'vala')
+endif
 
 #Configuration file
 
--- /filechooser-portal/meson.build	2023-07-10 20:54:14.000000000 +0300
+++ /filechooser-portal/meson.build	2023-08-19 02:03:57.726727728 +0300
@@ -1,5 +1,15 @@
 libexec_dir = join_paths(get_option('prefix'), get_option ('libexecdir'))
 
+fc_deps = [
+    pantheon_files_core_dep,
+    dependency('gdk-x11-3.0'),
+    handy_dep,
+    project_config_dep
+]
+if wayland_dep.found ()
+    fc_deps += wayland_dep
+endif
+
 executable(
     'io.elementary.files.xdg-desktop-portal',
     'ExternalWindow.vala',
@@ -7,13 +17,7 @@
     'FileChooserDialog.vala',
     'Main.vala',
 
-    dependencies : [
-        pantheon_files_core_dep,
-        dependency('gdk-x11-3.0'),
-        dependency('gdk-wayland-3.0'),
-        handy_dep,
-        project_config_dep
-    ],
+    dependencies : fc_deps,
     install: true,
     install_dir: libexec_dir,
 )
--- /filechooser-portal/ExternalWindow.vala	2023-07-10 20:54:14.000000000 +0300
+++ /filechooser-portal/ExternalWindow.vala	2023-08-19 02:04:04.010727542 +0300
@@ -34,6 +34,7 @@
                 warning ("Error getting external X11 window: %s", e.message);
                 return null;
             }
+#if WAYLAND
         } else if (handle.has_prefix (WAYLAND_PREFIX)) {
             try {
                 external_window = new ExternalWindowWayland (handle.substring (WAYLAND_PREFIX.length));
@@ -41,6 +42,7 @@
                 warning ("Error getting external Wayland window: %s", e.message);
                 return null;
             }
+#endif
         } else {
             warning ("Unhandled parent window type %s", handle);
         }
@@ -92,6 +94,7 @@
     }
 }
 
+#if WAYLAND
 public class ExternalWindowWayland : ExternalWindow, GLib.Object {
     private static Gdk.Display? wayland_display = null;
 
@@ -128,3 +131,4 @@
         }
     }
 }
+#endif
--- /plugins/send-by-email/meson.build	2023-07-10 20:54:14.000000000 +0300
+++ /plugins/send-by-email/meson.build	2023-08-19 02:04:01.190727626 +0300
@@ -1,6 +1,10 @@
 send_by_email_plugin_dir = join_paths(plugin_dir, 'core')
 
-gdk_dep = [ dependency('gdk-x11-3.0'), dependency('gdk-wayland-3.0') ]
+gdk_dep = [ dependency('gdk-x11-3.0') ]
+
+if wayland_dep.found ()
+    gdk_dep += dependency('gdk-wayland-3.0')
+endif
 
 shared_module(
     'pantheon-files-send-by-email',
--- /plugins/send-by-email/plugin.vala	2023-07-10 20:54:14.000000000 +0300
+++ /plugins/send-by-email/plugin.vala	2023-08-19 02:03:59.728727669 +0300
@@ -81,6 +81,7 @@
         if (window is Gdk.X11.Window) {
             var xid = ((Gdk.X11.Window) window).get_xid ();
             return "x11:%x".printf ((uint) xid);
+#if WAYLAND
         } else if (window is Gdk.Wayland.Window) {
             var handle = "wayland:";
             ((Gdk.Wayland.Window) window).export_handle ((w, h) => {
@@ -95,6 +96,7 @@
 
             return "";
 
+#endif
         } else {
             warning ("Unknown windowing system, not exporting window");
             return "";
