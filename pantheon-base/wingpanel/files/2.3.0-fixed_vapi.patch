--- /vapi/libmutter.vapi	2020-03-02 22:36:38.000000000 +0300
+++ /vapi/libmutter.vapi	2020-03-03 02:26:33.736289900 +0300
@@ -436,7 +436,7 @@
 		public string get_pad_action_label (Clutter.InputDevice pad, Meta.PadActionType action_type, uint action_number);
 #if HAS_MUTTER330
 		public int get_primary_monitor ();
-#if !HAS_MUTTER334
+#if HAS_MUTTER334
 		public unowned Meta.Selection get_selection ();
 #endif
 		public void get_size (out int width, out int height);
--- /wingpanel-interface/DBusServer.vala	2020-03-02 22:36:38.000000000 +0300
+++ /wingpanel-interface/DBusServer.vala	2020-03-03 02:32:18.060692400 +0300
@@ -23,22 +23,22 @@
 
     public signal void state_changed (BackgroundState state, uint animation_duration);
 
-    public void initialize (int monitor, int panel_height) {
+    public void initialize (int monitor, int panel_height) throws GLib.Error {
         background_manager = new BackgroundManager (monitor, panel_height);
         background_manager.state_changed.connect ((state, animation_duration) => {
             state_changed (state, animation_duration);
         });
     }
 
-    public bool begin_grab_focused_window (int x, int y, int button, uint time, uint state) {
+    public bool begin_grab_focused_window (int x, int y, int button, uint time, uint state) throws GLib.Error {
         return FocusManager.get_default ().begin_grab_focused_window (x, y, button, time, state);
     }
 
-    public void remember_focused_window () {
+    public void remember_focused_window () throws GLib.Error {
         FocusManager.get_default ().remember_focused_window ();
     }
 
-    public void restore_focused_window () {
+    public void restore_focused_window () throws GLib.Error {
         FocusManager.get_default ().restore_focused_window ();
     }
 }
--- /src/Services/BackgroundManager.vala	2020-03-02 22:36:38.000000000 +0300
+++ /src/Services/BackgroundManager.vala	2020-03-03 02:30:48.434354000 +0300
@@ -30,10 +30,10 @@
     public interface InterfaceBus : Object {
         public signal void state_changed (BackgroundState state, uint animation_duration);
 
-        public abstract void initialize (int monitor, int panel_height) throws IOError;
-        public abstract void remember_focused_window () throws IOError;
-        public abstract void restore_focused_window () throws IOError;
-        public abstract bool begin_grab_focused_window (int x, int y, int button, uint time, uint state) throws IOError;
+        public abstract void initialize (int monitor, int panel_height) throws GLib.Error;
+        public abstract void remember_focused_window () throws GLib.Error;
+        public abstract void restore_focused_window () throws GLib.Error;
+        public abstract bool begin_grab_focused_window (int x, int y, int button, uint time, uint state) throws GLib.Error;
     }
 
     public class BackgroundManager : Object {
