--- /src/Views/Layout.vala	2020-04-02 02:34:57.000000000 +0300
+++ /src/Views/Layout.vala	2020-04-08 01:30:54.504127000 +0300
@@ -85,6 +85,7 @@
 
             var overlay_key_combo = new Gtk.ComboBoxText ();
             overlay_key_combo.halign = Gtk.Align.START;
+            overlay_key_combo.valign = Gtk.Align.CENTER;
             overlay_key_combo.append_text (_("Disabled"));
             overlay_key_combo.append_text (_("Applications Menu"));
 
@@ -114,6 +115,28 @@
 
             var caps_lock_combo = new XkbComboBox (modifier, size_group[1]);
 
+            var layout_settings = new GLib.Settings ("org.pantheon.desktop.gala.layout-per-window");
+            var layout_val = layout_settings.get_enum ("save-type");
+
+            var layout_pw_label = new SettingsLabel (_("Save layout for:"), size_group[0]);
+
+            var layout_pw_combo = new Gtk.ComboBoxText ();
+            layout_pw_combo.halign = Gtk.Align.START;
+            layout_pw_combo.valign = Gtk.Align.CENTER;
+            layout_pw_combo.append_text (_("None"));
+            layout_pw_combo.append_text (_("Application"));
+            layout_pw_combo.append_text (_("Window"));
+            layout_pw_combo.active = layout_val;
+            size_group[1].add_widget (layout_pw_combo);
+
+            var restore_layout_label = new SettingsLabel (_("Restore layout:"), size_group[0]);
+
+            var restore_layout_switch = new Gtk.Switch ();
+            restore_layout_switch.sensitive = layout_val == 1;
+            restore_layout_switch.halign = Gtk.Align.START;
+            restore_layout_switch.valign = Gtk.Align.CENTER;
+            layout_settings.bind ("restore", restore_layout_switch, "active", SettingsBindFlags.DEFAULT);
+
             // Advanced settings panel
             AdvancedSettingsPanel? [] panels = {fifth_level_layouts_panel (),
                                                 japanese_layouts_panel (),
@@ -144,7 +167,11 @@
             attach (overlay_key_combo, 2, 2, 1, 1);
             attach (caps_lock_label, 1, 3, 1, 1);
             attach (caps_lock_combo, 2, 3, 1, 1);
-            attach (advanced_settings, 1, 4, 2);
+            attach (layout_pw_label, 1, 4, 1, 1);
+            attach (layout_pw_combo, 2, 4, 1, 1);
+            attach (restore_layout_label, 1, 5, 1, 1);
+            attach (restore_layout_switch, 2, 5, 1, 1);
+            attach (advanced_settings, 1, 6, 2);
 
             if (GLib.SettingsSchemaSource.get_default ().lookup ("io.elementary.wingpanel.keyboard", false) != null) {
                 var indicator_header = new Granite.HeaderLabel (_("Show in Panel"));
@@ -169,14 +196,14 @@
                 indicator_settings.bind ("capslock", caps_lock_indicator_switch, "active", SettingsBindFlags.DEFAULT);
                 indicator_settings.bind ("numlock", num_lock_indicator_switch, "active", SettingsBindFlags.DEFAULT);
 
-                attach (indicator_header, 1, 5);
-                attach (caps_lock_indicator_label, 1, 6);
-                attach (caps_lock_indicator_switch, 2, 6);
-                attach (num_lock_indicator_label, 1, 7);
-                attach (num_lock_indicator_switch, 2, 7);
+                attach (indicator_header, 1, 7);
+                attach (caps_lock_indicator_label, 1, 8);
+                attach (caps_lock_indicator_switch, 2, 8);
+                attach (num_lock_indicator_label, 1, 9);
+                attach (num_lock_indicator_switch, 2, 9);
             }
 
-            attach (action_area, 1, 8, 2);
+            attach (action_area, 1, 10, 2);
 
             // Cannot be just called from the constructor because the stack switcher
             // shows every child after the constructor has been called
@@ -224,6 +251,15 @@
                     gala_behavior_settings.set_string ("overlay-action", "io.elementary.shortcut-overlay");
                 }
             });
+
+            layout_pw_combo.changed.connect (() => {
+                var layout_combo_active = layout_pw_combo.active;
+                layout_settings.set_enum ("save-type", layout_combo_active);
+                restore_layout_switch.sensitive = layout_combo_active == 1;
+                if (layout_combo_active != 1) {
+                    layout_settings.set_boolean ("restore", false);
+                }
+            });
         }
 
         private AdvancedSettingsPanel? third_level_layouts_panel () {
